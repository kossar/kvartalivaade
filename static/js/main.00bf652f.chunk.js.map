{"version":3,"sources":["Table.js","Form.js","App.js","serviceWorker.js","index.js"],"names":["TableHeader","span","month","weekNumbers","i","push","map","colSpan","scope","weekNumber","FormatDate","oldDate","toString","split","reverse","join","replace","getWeekNumber","d","dayNum","getUTCDay","setUTCDate","getUTCDate","yearStart","Date","UTC","getUTCFullYear","Math","ceil","TableBody","props","rows","taskData","row","index","startWeek","startDate","endWeek","endDate","startYear","console","log","classCol","key","onClick","removeTask","taskName","className","Table","this","Component","Form","handleChange","event","target","name","value","setState","submitForm","handleSubmit","state","initialState","type","required","onChange","App","tasks","filter","task","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.00bf652f.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nconst TableHeader = () => {\r\n    \r\n    //TO-DO: siin võiks olla mingi kavalam viis, kuidas tabeli päis kokku pannakse\r\n    // mõtle dünaamiliselt, et kui tegemist ei ole aasta esimese kvartaliga? või kui vaates oleks vaja näidata 4 kuud või 5 kuud?\r\n     const months = ['', 'Jan', 'Feb', 'Mar'];\r\n     \r\n     //For colspan\r\n     function span(month){\r\n        if(month === '' || month === 'Feb'){\r\n            return \"4\"\r\n        }\r\n        else{\r\n            return '5'\r\n        }\r\n    } \r\n   \r\n    let weekNumbers = [];\r\n     for(let i = 1; i <= 13; i++){\r\n        weekNumbers[i - 1] = weekNumbers.push(i);\r\n    }\r\n    \r\n    return (\r\n        \r\n    <thead>\r\n      <tr>\r\n        { months.map(month => <th colSpan={span(month)}>{month}</th> )}\r\n      </tr>\r\n      <tr>\r\n        <td></td>\r\n        <th scope=\"col\">Task Name</th>\r\n        <th scope=\"col\">Start Date</th>\r\n        <th scope=\"col\">End Date</th>\r\n        {weekNumbers.map(weekNumber => <th scope=\"col\">{weekNumber}</th>)}\r\n      </tr>\r\n    </thead>\r\n    )\r\n}\r\nfunction FormatDate(oldDate) {\r\n    let newDate = oldDate.toString().split('-').reverse().join('-');\r\n    return newDate.replace(/-/g, '.');\r\n}\r\n\r\nfunction getWeekNumber(d){\r\n    var dayNum = d.getUTCDay() || 7;\r\n    d.setUTCDate(d.getUTCDate() + 4 - dayNum);\r\n    var yearStart = new Date(Date.UTC(d.getUTCFullYear(),0,1));\r\n    return Math.ceil((((d - yearStart) / 86400000) + 1)/7)\r\n  }\r\nfunction getYear(d){\r\n    let startYear = d.getUTCFullYear();\r\n    return startYear\r\n}\r\nconst TableBody = props => {\r\n    const rows = props.taskData.map((row, index) =>{\r\n        row.startWeek = getWeekNumber(new Date(row.startDate));\r\n        row.endWeek = getWeekNumber(new Date(row.endDate));\r\n        row.startYear = getYear(new Date(row.startDate));\r\n        console.log(row.startYear);\r\n        let classCol = [];\r\n\r\n        for(let i=1;i<=13;i++){\r\n            //TO-DO: siia vaja tingimust, millal lahter värvitakse\r\n            //Done \r\n            if(row.startYear === 2019 && i >= row.startWeek && i <= row.endWeek || row.startYear < 2019 && i <= row.endWeek){\r\n                classCol.push(\"colored\");    \r\n                \r\n            }\r\n            else{\r\n                classCol.push(\"nocolor\");\r\n            }\r\n        } \r\n\r\n        return (\r\n            <tr key={index}>\r\n                <td>\r\n                    <button onClick={() => props.removeTask(index)}>Delete</button>\r\n                </td>\r\n                <th>{row.taskName}</th>\r\n                <td className=\"start\">{FormatDate(row.startDate)}</td>\r\n                <td className=\"end\">{FormatDate(row.endDate)}</td>\r\n                {classCol.map(className => {\r\n                    return <td className={className}></td>\r\n                })}\r\n            </tr>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <tbody>{rows}</tbody>\r\n    )\r\n}\r\n\r\nclass Table extends Component {\r\n    render() {\r\n        const { taskData, removeTask } = this.props\r\n        return(\r\n            <table>\r\n                <TableHeader />\r\n                <TableBody taskData={taskData} removeTask={removeTask}  />\r\n            </table>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Table","import React, { Component } from 'react'\r\n\r\nclass Form extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n    \r\n        this.initialState = {\r\n            taskName: '',\r\n            startDate: '',\r\n            endDate: '',\r\n        }\r\n    \r\n    this.state = this.initialState\r\n    }\r\n\r\n    handleChange = event => {\r\n        const { name, value } = event.target\r\n            this.setState({\r\n                [name]: value,\r\n              })\r\n        }\r\n    \r\n    \r\n    submitForm = () => {\r\n        this.props.handleSubmit(this.state)\r\n        this.setState(this.initialState)\r\n    }\r\n\r\n    /*\r\n    Proovisin seda teha, aga ilmselt vale lähenemine, pean hetkel kooliasjadele keskenduma ja pole aega sellega tegeleda.\r\n    Tahtsin et onclick kutsuks selle funktsiooni välja ja kui kõik väljad on täidetud ja algus kuupäev väiksem lõpu omast\r\n    siis submitiks. Rohkem ei jõua kahjuks teha hetkel. \r\n\r\n    formValidation = () => {\r\n        if(this.taskName === '' ){\r\n            return alert('Please check fields');\r\n        }\r\n        else {\r\n            this.submitForm();\r\n        } \r\n    }*/\r\n\r\n    render() {\r\n        const { taskName, startDate, endDate } = this.state;\r\n        //TO-DO: ära piira siin kuupäeva sisestamise valikuid. Tabel peaks suutma kuvada ka taske, mis antud kvartalisse ei mahu või mahuvad osaliselt\r\n        // Done\r\n        return (\r\n            <form>\r\n                <label>Add new task:</label>\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"taskName\"\r\n                    required\r\n                    value={taskName}\r\n                    onChange={this.handleChange} />\r\n                <input \r\n                    type=\"date\"\r\n                    name=\"startDate\"\r\n                    required\r\n                    value={startDate}\r\n                    onChange={this.handleChange} />\r\n                <input \r\n                    type=\"date\"\r\n                    name=\"endDate\"\r\n                    required\r\n                    value={endDate}\r\n                    onChange={this.handleChange} />\r\n                <input  \r\n                    type=\"button\" \r\n                    value=\"Add\" \r\n                    onClick={this.submitForm} \r\n                />\r\n            </form>\r\n        )\r\n    }\r\n}\r\nexport default Form","import React, { Component } from 'react'\nimport Table from './Table'\nimport Form from './Form'\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    tasks: [\n      {\n        taskName: 'Task 1',\n        startDate: '2019-01-21',\n        endDate: '2019-01-27',\n      },\n      {\n        taskName: 'Task 2',\n        startDate: '2019-02-18',\n        endDate: '2019-03-03',\n      },\n      {\n        taskName: 'Task 3',\n        startDate: '2019-01-28',\n        endDate: '2019-03-20',\n      },\n    ]\n  }\n\n  \n  removeTask = index => {\n    const { tasks } = this.state\n\n    this.setState({\n      tasks: tasks.filter((task, i) => {\n        return i !== index\n      })\n    })\n  }\n  \n  handleSubmit = task => {\n    this.setState({ tasks: [...this.state.tasks, task] })\n  }\n\n\n  render() {\n    const { tasks } = this.state\n    \n    return (\n      <div className=\"container\">\n        <Table taskData={tasks} removeTask={this.removeTask} />\n        <Form handleSubmit={this.handleSubmit}/>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}